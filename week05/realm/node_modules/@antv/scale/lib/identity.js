"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("@antv/util");
var base_1 = require("./base");
/**
 * identity scale原则上是定义域和值域一致，scale/invert方法也是一致的
 * 参考R的实现：https://github.com/r-lib/scales/blob/master/R/pal-identity.r
 * 参考d3的实现（做了下转型）：https://github.com/d3/d3-scale/blob/master/src/identity.js
 */
var Identity = /** @class */ (function (_super) {
    tslib_1.__extends(Identity, _super);
    function Identity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Identity.prototype, "_unknown", {
        get: function () {
            /**
             * 兼容G2:
             * 实现一维图形时，例如position中x不存在时，Identity的values为[]，
             * scale(undefined)的期望结果是值域最小值
             */
            if (_.has(this.__cfg__, 'unknown')) {
                return this.__cfg__.unknown;
            }
            return this.range[0];
        },
        enumerable: true,
        configurable: true
    });
    Identity.prototype.scale = function (value) {
        return this._scale(value);
    };
    Identity.prototype.invert = function (scaled) {
        return this._scale(scaled);
    };
    Identity.prototype._initDefaultCfg = function () {
        this.type = 'identity';
        this.values = [];
        this.isIdentity = true;
    };
    Identity.prototype._init = function () { };
    Identity.prototype._scale = function (value) {
        if (_.isNumber(value)) {
            return value;
        }
        return this._unknown;
    };
    return Identity;
}(base_1.default));
exports.default = Identity;
//# sourceMappingURL=identity.js.map