"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("@antv/util");
var base_1 = require("./base");
var extended_1 = require("./util/extended");
var Category = /** @class */ (function (_super) {
    tslib_1.__extends(Category, _super);
    function Category() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Category.prototype.translate = function (value) {
        var index = _.indexOf(this.values, value);
        if (index === -1) {
            return _.isNumber(value) ? value : NaN;
        }
        return index;
    };
    Category.prototype.scale = function (value) {
        var order = this.translate(value);
        var percent = this._calcPercent(order, this.min, this.max);
        return this._calcValue(percent, _.head(this.range), _.last(this.range));
    };
    Category.prototype.invert = function (scaledValue) {
        if (!_.isNumber(scaledValue)) {
            return scaledValue;
        }
        var size = _.size(this.values) - 1;
        var percent = this._calcPercent(scaledValue, _.head(this.range), _.last(this.range));
        var idx = Math.round(size * percent);
        return this.values[idx];
    };
    Category.prototype.getText = function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var v = value;
        // value为index
        if (_.isNumber(value) && !_.includes(this.values, value)) {
            v = this.values[v];
        }
        return _super.prototype.getText.apply(this, tslib_1.__spreadArrays([v], args));
    };
    /**
     * ggplot将全数值的定义域视作线性
     * 再三考虑后，分类型scale还是不再支持这种兼容
     */
    // private isAllNumber: boolean;
    Category.prototype._initDefaultCfg = function () {
        this.type = 'cat';
        this.values = [];
        this.isCategory = true;
    };
    Category.prototype._init = function () {
        var size = _.size(this.values);
        this.min = 0;
        this.max = size > 1 ? size - 1 : size;
        if (_.isEmpty(this.ticks)) {
            this.ticks = this._setTicks();
        }
    };
    Category.prototype._setTicks = function () {
        var _this = this;
        var ticks = this.values;
        if (_.isNumber(this.tickInterval)) {
            return _.filter(ticks, function (__, i) { return i % (_this.tickInterval + 1) === 0; });
        }
        if (_.isNumber(this.tickCount)) {
            // 简单过滤，部分情况下小数的倍数也可以是整数
            var Q_1 = extended_1.ALL_Q.filter(function (n) { return Number.isInteger(n); });
            // tslint:disable-next-line: no-shadowed-variable
            var ticks_1 = extended_1.default(this.min, this.max, this.tickCount, false, Q_1).ticks;
            var valid = _.filter(ticks_1, function (tick) { return tick >= _this.min && tick <= _this.max; });
            return valid.map(function (index) { return _this.values[index]; });
        }
        return this.values;
    };
    return Category;
}(base_1.default));
exports.default = Category;
//# sourceMappingURL=category.js.map