export declare type ScaleType = 'base' | 'linear' | 'cat' | 'log' | 'pow' | 'identity' | 'time' | 'timeCat';
export interface Tick {
    /** 展示名 */
    text: string;
    /** 值域值 */
    value: number;
    /** 定义域值 */
    tickValue: string | number;
}
export declare type ScaleConfig = Partial<{
    /** 对应的字段id */
    field: string;
    /** 输入域、定义域 */
    values: any[];
    /** 定义域的最小值，d3为domain，ggplot2为limits，分类型下无效 */
    min: any;
    /** 定义域的最大值，分类型下无效 */
    max: any;
    /** min value limitted of the scale  */
    minLimit?: number;
    /** max value limitted of the scale */
    maxLimit?: number;
    /** 数据字段的显示别名，scale内部不感知，外部注入 */
    alias: string;
    /** 输出域、值域，默认值为[0, 1] */
    range: number[];
    /** Identity有效，非数值情况的返回值 */
    unknown: any;
    /** Log有效，底数 */
    base: number;
    /** Pow有效，指数 */
    exponent: number;
    /** 自动调整min、max */
    nice: boolean;
    /** 用于指定tick，优先级最高 */
    ticks: any[];
    /** 算法参数 */
    algoParam: Partial<{
        onlyLoose: boolean;
        Q: number[];
        w: [number, number, number, number];
    }>;
    /** tick间隔，只对分类型和时间型适用，优先级高于tickCount */
    tickInterval: number;
    /** tick最小间隔，只对线型适用 */
    minTickInterval: number;
    /** tick个数，默认值为5 */
    tickCount: number;
    /** ticks最大值，默认值为10 */
    maxTickCount: number;
    /** tick格式化函数，会影响数据在坐标轴 axis、图例 legend、tooltip 上的显示 */
    formatter: (v: any, k?: number) => any;
}>;
export default abstract class Scale {
    type: ScaleType;
    isCategory?: boolean;
    isLinear?: boolean;
    field?: ScaleConfig['field'];
    alias?: ScaleConfig['alias'];
    values: ScaleConfig['values'];
    min?: ScaleConfig['min'];
    max?: ScaleConfig['max'];
    range: ScaleConfig['range'];
    ticks: ScaleConfig['ticks'];
    formatter?: ScaleConfig['formatter'];
    protected __cfg__: ScaleConfig;
    constructor(cfg: ScaleConfig);
    translate(v: any): any;
    /** 将定义域转换为值域 */
    abstract scale(value: any): number;
    /** 将值域转换为定义域 */
    abstract invert(scaled: number): any;
    /** 重新初始化 */
    change(cfg: ScaleConfig): void;
    clone(): Scale;
    /** 获取坐标轴需要的ticks */
    getTicks(): Tick[];
    /** 获取Tick的格式化结果 */
    getText(value: any, key?: number): string;
    protected abstract _initDefaultCfg(): void;
    protected abstract _init(): void;
    /** 定义域转 0~1 */
    protected _calcPercent(value: any, min: number, max: number): number;
    /** 0~1转定义域 */
    protected _calcValue(percent: number, min: number, max: number): number;
}
