"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("@antv/util");
var Scale = /** @class */ (function () {
    function Scale(cfg) {
        this.type = 'base';
        this.range = [0, 1];
        this.ticks = [];
        this.__cfg__ = cfg;
        this._initDefaultCfg();
        _.assign(this, cfg);
        this._init();
    }
    // 对于原始值的必要转换，如分类、时间字段需转换成数值，用transform/map命名可能更好
    Scale.prototype.translate = function (v) {
        return v;
    };
    /** 重新初始化 */
    Scale.prototype.change = function (cfg) {
        this.constructor(_.assign(this.__cfg__, cfg));
    };
    Scale.prototype.clone = function () {
        return this.constructor(this.__cfg__);
    };
    /** 获取坐标轴需要的ticks */
    Scale.prototype.getTicks = function () {
        var _this = this;
        return _.map(this.ticks, function (tick, idx) {
            if (_.isObject(tick)) {
                // 仅当符合Tick类型时才有意义
                // _.some(['text', 'value', 'tickValue'], key => {
                //   if (_.has(tick, key)) {
                //     return false;
                //   }
                //   console.warn(`A tick need ${key} property.`);
                //   return true;
                // });
                return tick;
            }
            return {
                text: _this.getText(tick, idx),
                tickValue: tick,
                value: _this.scale(tick),
            };
        });
    };
    /** 获取Tick的格式化结果 */
    Scale.prototype.getText = function (value, key) {
        var formatter = this.formatter;
        var res = formatter ? formatter(value, key) : value;
        if (_.isNil(res) || !_.isFunction(res.toString)) {
            return '';
        }
        return res.toString();
    };
    /** 定义域转 0~1 */
    Scale.prototype._calcPercent = function (value, min, max) {
        if (_.isNumber(value)) {
            return (value - min) / (max - min);
        }
        return NaN;
    };
    /** 0~1转定义域 */
    Scale.prototype._calcValue = function (percent, min, max) {
        return min + percent * (max - min);
    };
    return Scale;
}());
exports.default = Scale;
//# sourceMappingURL=base.js.map