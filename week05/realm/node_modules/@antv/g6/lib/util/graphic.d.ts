import Group from '@antv/g-canvas/lib/group';
import Path from '@antv/g-canvas/lib/shape/path';
import { EdgeData, IBBox, IShapeBase, TreeGraphData } from '../types';
export declare const getBBox: (element: IShapeBase, group: Group) => IBBox;
/**
 * get loop edge config
 * @param cfg edge config
 */
export declare const getLoopCfgs: (cfg: EdgeData) => EdgeData;
/**
 * 根据 label 所在线条的位置百分比，计算 label 坐标
 * @param {object}  pathShape  G 的 path 实例，一般是 Edge 实例的 keyShape
 * @param {number}  percent    范围 0 - 1 的线条百分比
 * @param {number}  refX     x 轴正方向为基准的 label 偏移
 * @param {number}  refY     y 轴正方向为基准的 label 偏移
 * @param {boolean} rotate     是否根据线条斜率旋转文本
 * @return {object} 文本的 x, y, 文本的旋转角度
 */
export declare const getLabelPosition: (pathShape: Path, percent: number, refX: number, refY: number, rotate: boolean) => Partial<{
    rotate: number;
    textAlign: string;
    angle: number;
    x: number;
    y: number;
    text: string;
    stroke: string;
    opacity: number;
    fontSize: number;
    fontStyle: string;
    fill: string;
    rotateCenter: string;
    lineWidth?: number;
    shadowColor?: string;
    shadowBlur?: number;
    shadowOffsetX?: number;
    shadowOffsetY?: number;
    position: string;
    textBaseline: string;
    offset: number;
    background?: {
        fill?: string;
        stroke?: string;
        lineWidth?: number;
        radius?: number | number[];
        padding?: number | number[];
    };
}>;
export declare const traverseTree: <T extends {
    children?: T[];
}>(data: T, fn: (param: T) => boolean) => void;
export declare type TreeGraphDataWithPosition = TreeGraphData & {
    x: number;
    y: number;
    children?: TreeGraphDataWithPosition[];
};
/**
 *
 * @param data Tree graph data
 * @param layout
 */
export declare const radialLayout: (data: TreeGraphDataWithPosition, layout?: string) => TreeGraphDataWithPosition;
